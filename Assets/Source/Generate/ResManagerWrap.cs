//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ResManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ResManager), typeof(UnitySingleton<ResManager>));
		L.RegFunction("LoadRes", LoadRes);
		L.RegFunction("Remove", Remove);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadRes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResManager obj = (ResManager)ToLua.CheckObject<ResManager>(L, 1);
				Def.ModulesType arg0 = (Def.ModulesType)ToLua.CheckObject(L, 2, typeof(Def.ModulesType));
				string arg1 = ToLua.CheckString(L, 3);
				UnityEngine.Object o = obj.LoadRes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResManager obj = (ResManager)ToLua.CheckObject<ResManager>(L, 1);
				Def.ModulesType arg0 = (Def.ModulesType)ToLua.CheckObject(L, 2, typeof(Def.ModulesType));
				string arg1 = ToLua.CheckString(L, 3);
				System.Type arg2 = ToLua.CheckMonoType(L, 4);
				UnityEngine.Object o = obj.LoadRes(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResManager.LoadRes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResManager obj = (ResManager)ToLua.CheckObject<ResManager>(L, 1);
			Def.ModulesType arg0 = (Def.ModulesType)ToLua.CheckObject(L, 2, typeof(Def.ModulesType));
			string arg1 = ToLua.CheckString(L, 3);
			obj.Remove(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ResManager obj = (ResManager)ToLua.CheckObject<ResManager>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

